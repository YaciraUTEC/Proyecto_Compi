// Gramática - Kotlin

>    kotlinFile ::= {declaration [';']}
>    declaration ::= functionDeclaration | propertyDeclaration
    propertyDeclaration ::= ('val' | 'var') variableDeclaration ['=' expression] [';']
>    functionDeclaration ::= 'fun' Identifier functionValueParameters [':' type] [ block ]
>    Identifier ::= (Letter | '_ ') {Letter | '_' | UnicodeDigit} | '´' QuotedSymbol {QuotedSymbol} '`'
    functionValueParameters ::= '(' [functionValueParameter {',' functionValueParameter}] ')'
    functionValueParameter ::= parameter ['=' expression]
>    parameter ::= Identifier ':' type
>    block ::= '{' statements '}'
>    statements ::= [statement {';' statement}] [';']
>    statement ::= (declaration | assignment | forStatement | whileStatement | expression)
>    assignment ::= Identifier '=' expression
>    forStatement ::= 'for' '(' variableDeclaration 'in' expression ')' [block]
    variableDeclaration ::= Identifier [':' type]
>    whileStatement ::= 'while' '(' expression ')' (block | ';')
>    expression ::= conjunction {'||' conjunction}
:>    conjunction ::= equality {'&&' equality}
::>    equality ::= comparison {('!=' | '==') comparison}
::>    comparison ::= genericCallLikeComparison {('<' | '>' | '<=' | '>=') genericCallLikeComparison}
::>    genericCallLikeComparison ::= additiveExpression {'..' additiveExpression}
::>    additiveExpression ::= multiplicativeExpression {('+' | '-') multiplicativeExpression}
::>    multiplicativeExpression ::= primaryExpression {('*' | '/') primaryExpression}
    primaryExpression ::= Identifier | '(' expression ')' | stringLiteral | ifExpression | literalConstant
>    ifExpression ::= 'if' '(' expression ')' (block | ([block] [';'] 'else' (block | ';')) | ';')
    literalConstant ::= BooleanLiteral | IntegerLiteral | CharacterLiteral
